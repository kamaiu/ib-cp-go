// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonF41e5313DecodeGithubComKamaiuIbCpGoClientV1WsModel(in *jlexer.Lexer, out *MarketDataRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fields":
			if in.IsNull() {
				in.Skip()
				out.Fields = nil
			} else {
				in.Delim('[')
				if out.Fields == nil {
					if !in.IsDelim(']') {
						out.Fields = make([]string, 0, 4)
					} else {
						out.Fields = []string{}
					}
				} else {
					out.Fields = (out.Fields)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Fields = append(out.Fields, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF41e5313EncodeGithubComKamaiuIbCpGoClientV1WsModel(out *jwriter.Writer, in MarketDataRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"fields\":"
		out.RawString(prefix[1:])
		if in.Fields == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Fields {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketDataRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF41e5313EncodeGithubComKamaiuIbCpGoClientV1WsModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketDataRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF41e5313EncodeGithubComKamaiuIbCpGoClientV1WsModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketDataRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF41e5313DecodeGithubComKamaiuIbCpGoClientV1WsModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketDataRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF41e5313DecodeGithubComKamaiuIbCpGoClientV1WsModel(l, v)
}
func easyjsonF41e5313DecodeGithubComKamaiuIbCpGoClientV1WsModel1(in *jlexer.Lexer, out *MarketDataMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "topic":
			out.Topic = TopicType(in.String())
		case "31":
			out.LastPrice = string(in.String())
		case "55":
			out.Symbol = string(in.String())
		case "58":
			out.Text = string(in.String())
		case "70":
			out.High = string(in.String())
		case "71":
			out.Low = string(in.String())
		case "72":
			out.Position = string(in.String())
		case "73":
			out.MarketValue = string(in.String())
		case "74":
			out.AveragePrice = string(in.String())
		case "75":
			out.UnrealizedPnL = string(in.String())
		case "76":
			out.FormattedPosition = string(in.String())
		case "77":
			out.FormattedUnrealizedPnL = string(in.String())
		case "78":
			out.DailyPnL = string(in.String())
		case "82":
			out.ChangePrice = string(in.String())
		case "83":
			out.ChangePercent = string(in.String())
		case "84":
			out.BidPrice = string(in.String())
		case "85":
			out.AskSize = string(in.String())
		case "86":
			out.AskPrice = string(in.String())
		case "87":
			out.Volume = string(in.String())
		case "88":
			out.BidSize = string(in.String())
		case "6004":
			out.Exchange = string(in.String())
		case "6008":
			out.Conid6008 = string(in.String())
		case "6070":
			out.SecurityType = string(in.String())
		case "6072":
			out.Months = string(in.String())
		case "6073":
			out.RegularExpiry = string(in.String())
		case "6119":
			out.Marker = string(in.String())
		case "6457":
			out.UnderlyingConid = string(in.String())
		case "6509":
			out.MarketDataAvailability = string(in.String())
		case "7051":
			out.CompanyName = string(in.String())
		case "7059":
			out.LastSize = string(in.String())
		case "7094":
			out.ConidAndExchange = string(in.String())
		case "7219":
			out.ContractDescription = string(in.String())
		case "7220":
			out.ContractDescription2 = string(in.String())
		case "7221":
			out.ListingExchange = string(in.String())
		case "7280":
			out.Industry = string(in.String())
		case "7281":
			out.Category = string(in.String())
		case "7282":
			out.AverageDailyVolume = string(in.String())
		case "7284":
			out.HistoricVolume30d = string(in.String())
		case "7285":
			out.PutCallRatio = string(in.String())
		case "7286":
			out.DividendAmount = string(in.String())
		case "7287":
			out.DividendYieldPercent = string(in.String())
		case "7288":
			out.ExDateOfTheDividend = string(in.String())
		case "7289":
			out.MarketCap = string(in.String())
		case "7290":
			out.PE = string(in.String())
		case "7291":
			out.EPS = string(in.String())
		case "7292":
			out.CostBasis = string(in.String())
		case "7293":
			out.High52Week = string(in.String())
		case "7294":
			out.Low52Week = string(in.String())
		case "7295":
			out.OpenPrice = string(in.String())
		case "7296":
			out.ClosePrice = string(in.String())
		case "7308":
			out.Delta = string(in.String())
		case "7309":
			out.Gamma = string(in.String())
		case "7310":
			out.Theta = string(in.String())
		case "7311":
			out.Vega = string(in.String())
		case "7633":
			out.ImpliedVolatility = string(in.String())
		case "87_raw":
			out.VolumeRaw = float64(in.Float64())
		case "_updated":
			out.Updated = int64(in.Int64())
		case "conid":
			out.Conid = int64(in.Int64())
		case "server_id":
			out.Server_id = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF41e5313EncodeGithubComKamaiuIbCpGoClientV1WsModel1(out *jwriter.Writer, in MarketDataMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"topic\":"
		out.RawString(prefix[1:])
		out.String(string(in.Topic))
	}
	{
		const prefix string = ",\"31\":"
		out.RawString(prefix)
		out.String(string(in.LastPrice))
	}
	{
		const prefix string = ",\"55\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"58\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"70\":"
		out.RawString(prefix)
		out.String(string(in.High))
	}
	{
		const prefix string = ",\"71\":"
		out.RawString(prefix)
		out.String(string(in.Low))
	}
	{
		const prefix string = ",\"72\":"
		out.RawString(prefix)
		out.String(string(in.Position))
	}
	{
		const prefix string = ",\"73\":"
		out.RawString(prefix)
		out.String(string(in.MarketValue))
	}
	{
		const prefix string = ",\"74\":"
		out.RawString(prefix)
		out.String(string(in.AveragePrice))
	}
	{
		const prefix string = ",\"75\":"
		out.RawString(prefix)
		out.String(string(in.UnrealizedPnL))
	}
	{
		const prefix string = ",\"76\":"
		out.RawString(prefix)
		out.String(string(in.FormattedPosition))
	}
	{
		const prefix string = ",\"77\":"
		out.RawString(prefix)
		out.String(string(in.FormattedUnrealizedPnL))
	}
	{
		const prefix string = ",\"78\":"
		out.RawString(prefix)
		out.String(string(in.DailyPnL))
	}
	{
		const prefix string = ",\"82\":"
		out.RawString(prefix)
		out.String(string(in.ChangePrice))
	}
	{
		const prefix string = ",\"83\":"
		out.RawString(prefix)
		out.String(string(in.ChangePercent))
	}
	{
		const prefix string = ",\"84\":"
		out.RawString(prefix)
		out.String(string(in.BidPrice))
	}
	{
		const prefix string = ",\"85\":"
		out.RawString(prefix)
		out.String(string(in.AskSize))
	}
	{
		const prefix string = ",\"86\":"
		out.RawString(prefix)
		out.String(string(in.AskPrice))
	}
	{
		const prefix string = ",\"87\":"
		out.RawString(prefix)
		out.String(string(in.Volume))
	}
	{
		const prefix string = ",\"88\":"
		out.RawString(prefix)
		out.String(string(in.BidSize))
	}
	{
		const prefix string = ",\"6004\":"
		out.RawString(prefix)
		out.String(string(in.Exchange))
	}
	{
		const prefix string = ",\"6008\":"
		out.RawString(prefix)
		out.String(string(in.Conid6008))
	}
	{
		const prefix string = ",\"6070\":"
		out.RawString(prefix)
		out.String(string(in.SecurityType))
	}
	{
		const prefix string = ",\"6072\":"
		out.RawString(prefix)
		out.String(string(in.Months))
	}
	{
		const prefix string = ",\"6073\":"
		out.RawString(prefix)
		out.String(string(in.RegularExpiry))
	}
	{
		const prefix string = ",\"6119\":"
		out.RawString(prefix)
		out.String(string(in.Marker))
	}
	{
		const prefix string = ",\"6457\":"
		out.RawString(prefix)
		out.String(string(in.UnderlyingConid))
	}
	{
		const prefix string = ",\"6509\":"
		out.RawString(prefix)
		out.String(string(in.MarketDataAvailability))
	}
	{
		const prefix string = ",\"7051\":"
		out.RawString(prefix)
		out.String(string(in.CompanyName))
	}
	{
		const prefix string = ",\"7059\":"
		out.RawString(prefix)
		out.String(string(in.LastSize))
	}
	{
		const prefix string = ",\"7094\":"
		out.RawString(prefix)
		out.String(string(in.ConidAndExchange))
	}
	{
		const prefix string = ",\"7219\":"
		out.RawString(prefix)
		out.String(string(in.ContractDescription))
	}
	{
		const prefix string = ",\"7220\":"
		out.RawString(prefix)
		out.String(string(in.ContractDescription2))
	}
	{
		const prefix string = ",\"7221\":"
		out.RawString(prefix)
		out.String(string(in.ListingExchange))
	}
	{
		const prefix string = ",\"7280\":"
		out.RawString(prefix)
		out.String(string(in.Industry))
	}
	{
		const prefix string = ",\"7281\":"
		out.RawString(prefix)
		out.String(string(in.Category))
	}
	{
		const prefix string = ",\"7282\":"
		out.RawString(prefix)
		out.String(string(in.AverageDailyVolume))
	}
	{
		const prefix string = ",\"7284\":"
		out.RawString(prefix)
		out.String(string(in.HistoricVolume30d))
	}
	{
		const prefix string = ",\"7285\":"
		out.RawString(prefix)
		out.String(string(in.PutCallRatio))
	}
	{
		const prefix string = ",\"7286\":"
		out.RawString(prefix)
		out.String(string(in.DividendAmount))
	}
	{
		const prefix string = ",\"7287\":"
		out.RawString(prefix)
		out.String(string(in.DividendYieldPercent))
	}
	{
		const prefix string = ",\"7288\":"
		out.RawString(prefix)
		out.String(string(in.ExDateOfTheDividend))
	}
	{
		const prefix string = ",\"7289\":"
		out.RawString(prefix)
		out.String(string(in.MarketCap))
	}
	{
		const prefix string = ",\"7290\":"
		out.RawString(prefix)
		out.String(string(in.PE))
	}
	{
		const prefix string = ",\"7291\":"
		out.RawString(prefix)
		out.String(string(in.EPS))
	}
	{
		const prefix string = ",\"7292\":"
		out.RawString(prefix)
		out.String(string(in.CostBasis))
	}
	{
		const prefix string = ",\"7293\":"
		out.RawString(prefix)
		out.String(string(in.High52Week))
	}
	{
		const prefix string = ",\"7294\":"
		out.RawString(prefix)
		out.String(string(in.Low52Week))
	}
	{
		const prefix string = ",\"7295\":"
		out.RawString(prefix)
		out.String(string(in.OpenPrice))
	}
	{
		const prefix string = ",\"7296\":"
		out.RawString(prefix)
		out.String(string(in.ClosePrice))
	}
	{
		const prefix string = ",\"7308\":"
		out.RawString(prefix)
		out.String(string(in.Delta))
	}
	{
		const prefix string = ",\"7309\":"
		out.RawString(prefix)
		out.String(string(in.Gamma))
	}
	{
		const prefix string = ",\"7310\":"
		out.RawString(prefix)
		out.String(string(in.Theta))
	}
	{
		const prefix string = ",\"7311\":"
		out.RawString(prefix)
		out.String(string(in.Vega))
	}
	{
		const prefix string = ",\"7633\":"
		out.RawString(prefix)
		out.String(string(in.ImpliedVolatility))
	}
	{
		const prefix string = ",\"87_raw\":"
		out.RawString(prefix)
		out.Float64(float64(in.VolumeRaw))
	}
	{
		const prefix string = ",\"_updated\":"
		out.RawString(prefix)
		out.Int64(int64(in.Updated))
	}
	{
		const prefix string = ",\"conid\":"
		out.RawString(prefix)
		out.Int64(int64(in.Conid))
	}
	{
		const prefix string = ",\"server_id\":"
		out.RawString(prefix)
		out.String(string(in.Server_id))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketDataMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF41e5313EncodeGithubComKamaiuIbCpGoClientV1WsModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketDataMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF41e5313EncodeGithubComKamaiuIbCpGoClientV1WsModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketDataMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF41e5313DecodeGithubComKamaiuIbCpGoClientV1WsModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketDataMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF41e5313DecodeGithubComKamaiuIbCpGoClientV1WsModel1(l, v)
}
