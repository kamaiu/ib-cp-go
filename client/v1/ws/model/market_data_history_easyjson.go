// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson5ec5fdecDecodeGithubComKamaiuIbCpGoClientV1WsModel(in *jlexer.Lexer, out *MarketDataHistoryRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "period":
			out.Period = string(in.String())
		case "bar":
			out.Bar = string(in.String())
		case "outsideRth":
			out.OutsideRth = bool(in.Bool())
		case "source":
			out.Source = string(in.String())
		case "format":
			out.Format = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5ec5fdecEncodeGithubComKamaiuIbCpGoClientV1WsModel(out *jwriter.Writer, in MarketDataHistoryRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"period\":"
		out.RawString(prefix[1:])
		out.String(string(in.Period))
	}
	{
		const prefix string = ",\"bar\":"
		out.RawString(prefix)
		out.String(string(in.Bar))
	}
	{
		const prefix string = ",\"outsideRth\":"
		out.RawString(prefix)
		out.Bool(bool(in.OutsideRth))
	}
	{
		const prefix string = ",\"source\":"
		out.RawString(prefix)
		out.String(string(in.Source))
	}
	{
		const prefix string = ",\"format\":"
		out.RawString(prefix)
		out.String(string(in.Format))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketDataHistoryRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5ec5fdecEncodeGithubComKamaiuIbCpGoClientV1WsModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketDataHistoryRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5ec5fdecEncodeGithubComKamaiuIbCpGoClientV1WsModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketDataHistoryRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5ec5fdecDecodeGithubComKamaiuIbCpGoClientV1WsModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketDataHistoryRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5ec5fdecDecodeGithubComKamaiuIbCpGoClientV1WsModel(l, v)
}
func easyjson5ec5fdecDecodeGithubComKamaiuIbCpGoClientV1WsModel1(in *jlexer.Lexer, out *MarketDataHistoryMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "topic":
			out.Topic = TopicType(in.String())
		case "barLength":
			out.BarLength = int64(in.Int64())
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "high":
			out.High = string(in.String())
		case "low":
			out.Low = string(in.String())
		case "mdAvailability":
			out.MdAvailability = string(in.String())
		case "messageVersion":
			out.MessageVersion = int64(in.Int64())
		case "mktDataDelay":
			out.MktDataDelay = int64(in.Int64())
		case "negativeCapable":
			out.NegativeCapable = bool(in.Bool())
		case "outsideRth":
			out.OutsideRth = bool(in.Bool())
		case "points":
			out.Points = int64(in.Int64())
		case "priceDisplayRule":
			out.PriceDisplayRule = int64(in.Int64())
		case "priceDisplayValue":
			out.PriceDisplayValue = string(in.String())
		case "priceFactor":
			out.PriceFactor = int64(in.Int64())
		case "startTime":
			out.StartTime = string(in.String())
		case "symbol":
			out.Symbol = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "timePeriod":
			out.TimePeriod = string(in.String())
		case "tradingDayDuration":
			out.TradingDayDuration = int64(in.Int64())
		case "travelTime":
			out.TravelTime = int64(in.Int64())
		case "volumeFactor":
			out.VolumeFactor = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5ec5fdecEncodeGithubComKamaiuIbCpGoClientV1WsModel1(out *jwriter.Writer, in MarketDataHistoryMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"topic\":"
		out.RawString(prefix[1:])
		out.String(string(in.Topic))
	}
	{
		const prefix string = ",\"barLength\":"
		out.RawString(prefix)
		out.Int64(int64(in.BarLength))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"high\":"
		out.RawString(prefix)
		out.String(string(in.High))
	}
	{
		const prefix string = ",\"low\":"
		out.RawString(prefix)
		out.String(string(in.Low))
	}
	{
		const prefix string = ",\"mdAvailability\":"
		out.RawString(prefix)
		out.String(string(in.MdAvailability))
	}
	{
		const prefix string = ",\"messageVersion\":"
		out.RawString(prefix)
		out.Int64(int64(in.MessageVersion))
	}
	{
		const prefix string = ",\"mktDataDelay\":"
		out.RawString(prefix)
		out.Int64(int64(in.MktDataDelay))
	}
	{
		const prefix string = ",\"negativeCapable\":"
		out.RawString(prefix)
		out.Bool(bool(in.NegativeCapable))
	}
	{
		const prefix string = ",\"outsideRth\":"
		out.RawString(prefix)
		out.Bool(bool(in.OutsideRth))
	}
	{
		const prefix string = ",\"points\":"
		out.RawString(prefix)
		out.Int64(int64(in.Points))
	}
	{
		const prefix string = ",\"priceDisplayRule\":"
		out.RawString(prefix)
		out.Int64(int64(in.PriceDisplayRule))
	}
	{
		const prefix string = ",\"priceDisplayValue\":"
		out.RawString(prefix)
		out.String(string(in.PriceDisplayValue))
	}
	{
		const prefix string = ",\"priceFactor\":"
		out.RawString(prefix)
		out.Int64(int64(in.PriceFactor))
	}
	{
		const prefix string = ",\"startTime\":"
		out.RawString(prefix)
		out.String(string(in.StartTime))
	}
	{
		const prefix string = ",\"symbol\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"timePeriod\":"
		out.RawString(prefix)
		out.String(string(in.TimePeriod))
	}
	{
		const prefix string = ",\"tradingDayDuration\":"
		out.RawString(prefix)
		out.Int64(int64(in.TradingDayDuration))
	}
	{
		const prefix string = ",\"travelTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.TravelTime))
	}
	{
		const prefix string = ",\"volumeFactor\":"
		out.RawString(prefix)
		out.Int64(int64(in.VolumeFactor))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketDataHistoryMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5ec5fdecEncodeGithubComKamaiuIbCpGoClientV1WsModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketDataHistoryMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5ec5fdecEncodeGithubComKamaiuIbCpGoClientV1WsModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketDataHistoryMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5ec5fdecDecodeGithubComKamaiuIbCpGoClientV1WsModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketDataHistoryMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5ec5fdecDecodeGithubComKamaiuIbCpGoClientV1WsModel1(l, v)
}
