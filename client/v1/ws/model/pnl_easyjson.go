// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE92dfa68DecodeGithubComKamaiuIbCpGoClientV1WsModel(in *jlexer.Lexer, out *PNLArg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rowType":
			out.RowType = int64(in.Int64())
		case "dpl":
			out.DPL = float64(in.Float64())
		case "upl":
			out.UPL = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE92dfa68EncodeGithubComKamaiuIbCpGoClientV1WsModel(out *jwriter.Writer, in PNLArg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"rowType\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.RowType))
	}
	{
		const prefix string = ",\"dpl\":"
		out.RawString(prefix)
		out.Float64(float64(in.DPL))
	}
	{
		const prefix string = ",\"upl\":"
		out.RawString(prefix)
		out.Float64(float64(in.UPL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PNLArg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE92dfa68EncodeGithubComKamaiuIbCpGoClientV1WsModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PNLArg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE92dfa68EncodeGithubComKamaiuIbCpGoClientV1WsModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PNLArg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE92dfa68DecodeGithubComKamaiuIbCpGoClientV1WsModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PNLArg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE92dfa68DecodeGithubComKamaiuIbCpGoClientV1WsModel(l, v)
}
func easyjsonE92dfa68DecodeGithubComKamaiuIbCpGoClientV1WsModel1(in *jlexer.Lexer, out *PNL) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "topic":
			out.Topic = TopicType(in.String())
		case "args":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Args = make(map[string]*PNLArg)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 *PNLArg
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(PNLArg)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					(out.Args)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE92dfa68EncodeGithubComKamaiuIbCpGoClientV1WsModel1(out *jwriter.Writer, in PNL) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"topic\":"
		out.RawString(prefix[1:])
		out.String(string(in.Topic))
	}
	{
		const prefix string = ",\"args\":"
		out.RawString(prefix)
		if in.Args == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.Args {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v2Name))
				out.RawByte(':')
				if v2Value == nil {
					out.RawString("null")
				} else {
					(*v2Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PNL) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE92dfa68EncodeGithubComKamaiuIbCpGoClientV1WsModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PNL) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE92dfa68EncodeGithubComKamaiuIbCpGoClientV1WsModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PNL) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE92dfa68DecodeGithubComKamaiuIbCpGoClientV1WsModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PNL) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE92dfa68DecodeGithubComKamaiuIbCpGoClientV1WsModel1(l, v)
}
